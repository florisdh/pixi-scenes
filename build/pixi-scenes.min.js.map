{"version":3,"sources":["webpack://PIXI.scenes/webpack/universalModuleDefinition","webpack://PIXI.scenes/webpack/bootstrap","webpack://PIXI.scenes/external \"PIXI\"","webpack://PIXI.scenes/./src/index.ts","webpack://PIXI.scenes/./src/scene.ts","webpack://PIXI.scenes/./src/sceneManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Scene","SceneManager","app","scenes","hasRun","init","start","stop","update","delta","Container","this","current","ticker","add","active","PIXI","settings","TARGET_FPMS","scene","contains","remove","stage","addChild","removeChild","keys"],"mappings":"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","file":"pixi-scenes.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"PIXI\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"scenes\", [\"PIXI\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"scenes\"] = factory(require(\"PIXI\"));\n\telse\n\t\troot[\"PIXI\"] = root[\"PIXI\"] || {}, root[\"PIXI\"][\"scenes\"] = factory(root[\"PIXI\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import _Scene from \"./scene\";\r\nimport _SceneManager from \"./sceneManager\";\r\nimport _IScene from \"./iScene\";\r\n\r\ndeclare global {\r\n    namespace PIXI.scenes {\r\n        export type Scene = _Scene;\r\n        export const Scene: typeof _Scene;\r\n        export type SceneManager = _SceneManager;\r\n        export const SceneManager: typeof _SceneManager;\r\n    }\r\n}\r\n\r\nexport {\r\n    _Scene as Scene,\r\n    _SceneManager as SceneManager,\r\n    _IScene as IScene\r\n};\r\n","import * as PIXI from 'pixi.js';\r\nimport SceneManager from \"./sceneManager\";\r\nimport IScene from \"./iScene\";\r\n\r\n/**\r\n * Base scene class which should be extended and used to your own likings.\r\n */\r\nexport default class Scene extends PIXI.Container implements IScene {\r\n\r\n    /**\r\n     * Reference to the pixi application this scene has been added to.\r\n     * This will automatically be set by the SceneManager after it has been added.\r\n     */\r\n    public app: PIXI.Application|null;\r\n\r\n    /**\r\n     * Reference to the SceneManager this Scene has been added to.\r\n     * This will automatically be set by the SceneManager after it has been added.\r\n     */\r\n    public scenes: SceneManager|null;\r\n\r\n    /**\r\n     * If the scene has been started before from it's current SceneManager.\r\n     * The SceneManager will use this to check if the init should be run.\r\n     */\r\n    public hasRun: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.app = null;\r\n        this.scenes = null;\r\n        this.hasRun = false;\r\n    }\r\n\r\n    /**\r\n     * Called directly after this Scene is added to a SceneManager.\r\n     * You should create all of your elements for this scene here.\r\n     */\r\n    public init(): void {}\r\n\r\n    /**\r\n     * Called after this Scene is started from the SceneManager.\r\n     * This means that this Scene is now the active scene in the SceneManager and will be rendered.\r\n     */\r\n    public start(): void {}\r\n\r\n    /**\r\n     * Called after this Scene is stopped from the SceneManager.\r\n     * The Scene is not the active scene anymore, nor will it be rendered.\r\n     */\r\n    public stop(): void {}\r\n\r\n    /**\r\n     * Called with every PIXI update tick while this Scene is the active scene in the SceneManager.\r\n     * @param {number} delta Elapsed time since the last update in milliseconds.\r\n     */\r\n    public update(delta: number): void {}\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport IScene from \"./iScene\";\r\n\r\n/**\r\n * Manages numerous Scenes and makes sure they function as they should.\r\n * @param {PIXI.Application} app The pixi application the scenes will be bound to.\r\n */\r\nexport default class SceneManager {\r\n\r\n    private app: PIXI.Application;\r\n    private scenes: {[name: string]: IScene};\r\n    private current: string|null;\r\n\r\n    constructor(app: PIXI.Application) {\r\n        this.app = app;\r\n        this.scenes = {};\r\n        this.current = null;\r\n        app.ticker.add(this.update.bind(this));\r\n    }\r\n\r\n    private update(delta: number): void {\r\n        let active: IScene|null = this.active;\r\n        if (active) {\r\n            active.update(delta / PIXI.settings.TARGET_FPMS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the scene instance to function under this manager.\r\n     * * If the name is already taken, it won't be added.\r\n     * @param {string} name The name you give to this scene instance.\r\n     * @param {Scene} scene Instance of the scene you want to add.\r\n     */\r\n    public add(name: string, scene: IScene): void {\r\n        // TODO: Remove from previous manager if set\r\n        if (!name || this.contains(name)) {\r\n            return;\r\n        }\r\n        this.scenes[name] = scene;\r\n        scene.app = this.app;\r\n        scene.scenes = this;\r\n        scene.hasRun = false;\r\n    }\r\n\r\n    /**\r\n     * Removed a scene from this manager.\r\n     * * If this scene is currently active, it will be stopped first.\r\n     * @param {string} name Name given to this scene instance.\r\n     */\r\n    public remove(name: string): boolean {\r\n        if (!name || !this.contains(name)) {\r\n            return false;\r\n        }\r\n        if (this.current === name) {\r\n            this.stop();\r\n        }\r\n        const scene = this.scenes[name];\r\n        scene.app = null;\r\n        scene.scenes = null;\r\n        delete this.scenes[name];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks there is a scene with this name in this manager.\r\n     * @param {string} name \r\n     * @returns {boolean}\r\n     */\r\n    public contains(name: string): boolean {\r\n        return name in this.scenes;\r\n    }\r\n\r\n    /**\r\n     * Starts a scene and set's it to be the active scene of this manager.\r\n     * * Stops the previous active scene first if defined.\r\n     * @param {string} name \r\n     */\r\n    public start(name: string): void {\r\n        if (!this.contains(name) || name === this.current) {\r\n            return;\r\n        }\r\n        \r\n        this.stop();\r\n\r\n        // Start new\r\n        this.current = name;\r\n        const active = this.active;\r\n        if (active) {\r\n            if (!active.hasRun) {\r\n                active.init();\r\n                active.hasRun = true;\r\n            }\r\n            this.app.stage.addChild(active);\r\n            active.start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the scene and unsets it as the active scene in this manager.\r\n     */\r\n    public stop(): void {\r\n        let active: IScene|null = this.active;\r\n        if (active) {\r\n            this.current = null;\r\n            active.stop();\r\n            this.app.stage.removeChild(active);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Getting the active scene in this manager.\r\n     * @returns {Scene|null}\r\n     */\r\n    public get active(): IScene|null {\r\n        return this.current ? this.scenes[this.current] : null;\r\n    }\r\n\r\n    /**\r\n     * Getting the name of the active scene in this manager.\r\n     * @returns {Scene|null}\r\n     */\r\n    public get activeName(): string|null {\r\n        return this.current;\r\n    }\r\n\r\n    /**\r\n     * Getting the names of all the scenes in this manager.\r\n     * @returns {string[]}\r\n     */\r\n    public get sceneNames(): string[] {\r\n        return Object.keys(this.scenes);\r\n    }\r\n}\r\n"],"sourceRoot":""}